#!/usr/bin/env python3
"""
Telegram bot that provides interesting facts about places near user's location.
"""

import os
import logging
import asyncio
from typing import Optional
from telegram import Update, Location
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes
)
from dotenv import load_dotenv
import openai
from health_server import run_health_server

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configuration
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN is required")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY is required")

# Initialize OpenAI
openai.api_key = OPENAI_API_KEY

class LocationFactBot:
    def __init__(self):
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """Setup bot command and message handlers"""
        # Commands
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # Location messages
        self.application.add_handler(MessageHandler(filters.LOCATION, self.handle_location))
        
        # Text messages
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /start command"""
        welcome_message = (
            "üåç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –æ –º–µ—Å—Ç–∞—Ö!\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç "
            "–æ –±–ª–∏–∂–∞–π—à–µ–º –∫ –≤–∞–º –º–µ—Å—Ç–µ.\n\n"
            "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:\n"
            "üìç –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É ‚Üí –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è ‚Üí –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        )
        await update.message.reply_text(welcome_message)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle /help command"""
        help_message = (
            "ü§ñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç:\n\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram\n"
            "2. –Ø –Ω–∞–π–¥—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –º–µ—Å—Ç–æ —Ä—è–¥–æ–º —Å –≤–∞–º–∏\n"
            "3. –ü–æ–ª—É—á–∏—Ç–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç –æ–± —ç—Ç–æ–º –º–µ—Å—Ç–µ!\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "üí° –°–æ–≤–µ—Ç: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –≤–∫–ª—é—á–µ–Ω—ã —Å–ª—É–∂–±—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"
        )
        await update.message.reply_text(help_message)
    
    async def handle_location(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle location messages"""
        location: Location = update.message.location
        user_id = update.effective_user.id
        username = update.effective_user.username or "Unknown"
        
        logger.info(f"Received location from user {username} ({user_id}): "
                   f"lat={location.latitude}, lon={location.longitude}")
        
        # Send typing indicator
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        try:
            # Get interesting fact about the location
            fact = await self.get_location_fact(location.latitude, location.longitude)
            
            if fact:
                response = f"üåü –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –≤–∞—à–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏:\n\n{fact}"
            else:
                response = ("üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –≤–∞—à–µ–º "
                          "–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ.")
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"Error processing location: {e}")
            await update.message.reply_text(
                "üòû –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
            )
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Handle text messages"""
        message = (
            "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å "
            "–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –±–ª–∏–∂–∞–π—à–µ–º –º–µ—Å—Ç–µ.\n\n"
            "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è'."
        )
        await update.message.reply_text(message)
    
    async def get_location_fact(self, latitude: float, longitude: float) -> Optional[str]:
        """Get interesting fact about location using OpenAI"""
        try:
            prompt = f"""
            –ù–∞–π–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏ –Ω–µ–æ–±—ã—á–Ω–æ–µ –º–µ—Å—Ç–æ –∏–ª–∏ —Ñ–∞–∫—Ç —Ä—è–¥–æ–º —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ {latitude}, {longitude}.
            
            –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:
            1. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            2. –ù–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
            3. –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∏ –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç
            4. –ë–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ—á–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –æ—Ç–≤–µ—Ç–µ
            5. –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –º–µ–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö, –Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –∏–ª–∏ —Ñ–∞–∫—Ç–∞—Ö
            6. –ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É —Å —Ñ–∞–∫—Ç–∞, –±–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π
            
            –ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:
            - "–í —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –¥—É–± –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä–æ–º—É –±–æ–ª–µ–µ 300 –ª–µ—Ç..."
            - "–ó–¥–µ—Å—å –ø—Ä–æ—Ö–æ–¥–∏–ª–∞ –¥—Ä–µ–≤–Ω—è—è —Ç–æ—Ä–≥–æ–≤–∞—è –¥–æ—Ä–æ–≥–∞, —Å–æ–µ–¥–∏–Ω—è–≤—à–∞—è..."
            - "–í –ø–∞—Ä–µ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ –æ—Ç—Å—é–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞–º—è—Ç–Ω–∏–∫ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã..."
            """
            
            client = openai.OpenAI(api_key=OPENAI_API_KEY)
            
            response = client.chat.completions.create(
                model="gpt-4-turbo-preview",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏—Å—Ç–æ—Ä–∏–∏, –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –º–µ—Å—Ç–∞–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –Ω–∞—Ö–æ–¥–∏—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –ª—é–±—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=200,
                temperature=0.8
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"Error getting location fact from OpenAI: {e}")
            return None
    
    async def run(self):
        """Run the bot"""
        logger.info("Starting Location Facts Bot...")
        
        # Start health server for Railway
        run_health_server(port=int(os.getenv('PORT', 8000)))
        
        await self.application.run_polling(drop_pending_updates=True)

def main():
    """Main function"""
    try:
        bot = LocationFactBot()
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Bot crashed: {e}")
        raise

if __name__ == "__main__":
    main() 